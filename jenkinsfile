pipeline {
    agent any 

    stages {

        stage('build the app') { 
            when {
                anyOf {
                    branch 'dev'
                }
            }  
            steps {
                script {     
                    sh 'docker build -t hometask-php .'
                    sh 'docker build -t hometask-nginx -f Dockerfile.nginx .'        
                    sh 'docker compose up --build -d '      
                }
            }
            post {
                failure {
                    sh 'docker compose down'
                }
            }
        }

        stage('e2e tests'){
            when {
                anyOf {
                    branch 'dev'
                }
            }
            steps{
                script{
                        sh """
                            counter=0
                            while [ "\$counter" -le 20 ]; do
                            check=`curl -LI nginx:80 --connect-timeout 5 -o /dev/null -w '%{http_code}\n' -s || true`
                            if [ \$check -eq "200" ]; then 
                                echo "e2e finished successfully"
                                docker compose down 
                                exit 0
                            else 
                                echo \$check
                                sleep 3
                                counter=\$((counter+1))
                            fi
                            done
                            echo "e2e timeout -- failed"
                            exit 1
                        """ 
                }                          
            }
        }

        stage("publish to ecr"){
            when {
                anyOf {
                    branch 'dev'
                }
            }
            steps{
                script{
                    withAWS(credentials:'AWS_Cred_Private', region: 'us-east-1') {
                        //Calculate the future tag if exist tags in ecr else use the default first tag 1.0.0   
                        tag = sh (script: "aws ecr list-images --repository-name hometask --filter --region us-east-1 tagStatus=TAGGED | grep imageTag | awk ' { print \$2 } ' |sort -V -r | head -1 | sed 's/\"//g' |tr \".\" \" \" | awk ' { print \$1 \".\" \$2 \".\" \$3+1 } '", returnStdout: true).trim()               
                        docker.withRegistry('https://587447957359.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:AWS_Cred_Private') {
                            if (tag != ""){
                                app = docker.build("hometask")
                                app.push("${tag}")
                                nginx = docker.build("hometask-nginx", "-f Dockerfile.nginx .")
                                nginx.push("${tag}")
                            }
                            else{
                                app = docker.build("hometask")
                                app.push("1.0.0")
                                nginx = docker.build("hometask-nginx", "-f Dockerfile.nginx .")
                                nginx.push("1.0.0")
                            }                      
                        }
                    }
                }
            }

        } 
          
        stage('tag new version'){
            when {
                anyOf {
                    branch 'dev'
                }
            }
            steps{
                script{    
                    withAWS(credentials:'AWS_Cred_Private', region: 'us-east-1') {  
                        tag = sh (script: "aws ecr list-images --repository-name hometask --filter --region us-east-1 tagStatus=TAGGED | grep imageTag | awk ' { print \$2 } ' |sort -V -r | head -1 | sed 's/\"//g'", returnStdout: true).trim()
                        withCredentials([[$class: 'UsernamePasswordMultiBinding' , credentialsId: 'hometask_github_cred', usernameVariable: 'username', passwordVariable: 'password']]){	
                            sh """
                                git clean -f -x
                                git tag -a ${tag} -m "version ${tag}"
                                git push https://$username:$password@github.com/Brylov/HomeTask.git --tag                          
                            """
                        } 
                    }                   
                }
            }
        }
        
        stage('helm chart update && push to main ** PR **'){         
            steps{
                script{
                    withAWS(credentials:'AWS_Cred_Private', region: 'us-east-1') {      
                        tag = sh (script: "aws ecr list-images --repository-name hometask --filter --region us-east-1 tagStatus=TAGGED | grep imageTag | awk ' { print \$2 } ' |sort -V -r | head -1 | sed 's/\"//g'", returnStdout: true).trim()
                        withCredentials([[$class: 'UsernamePasswordMultiBinding' , credentialsId: 'hometask_github_cred', usernameVariable: 'username', passwordVariable: 'password']]){
                            //git url:"https://github.com/Brylov/HomeTask.git", branch: "main", credentialsId: 'hometask_github_cred'
                            sh """   
                                git clean -f -x
                                yq -i '.nginx.image.tag = "${tag}"' k8/helm/values.yaml
                                yq -i '.php.image.tag = "${tag}"' k8/helm/values.yaml
                                git add .
                                git commit -m "image update version -- new version -- ${tag} #jenkins"
                                git push https://$username:$password@github.com/Brylov/HomeTask.git HEAD:main                  
                            """
                            // sh """yq -i '.php.image.tag = "${tag}"' k8/helm/values.yaml"""
                            // sh """yq -i '.nginx.image.tag = "${tag}"' k8/helm/values.yaml"""
                            // sh """
                            //         git add .
                            //         git commit -m "image update version -- new version -- ${tag} #jenkins"
                            //         git push https://$username:$password@github.com/Brylov/HomeTask.git                          
                            // """
                        }
                        
                    }
                }
            }
        }
        // stage('push to main **PR**'){
        //     when {
        //         anyOf {
        //             branch 'dev'
        //         }
        //     }
        //     steps{
        //         script{    
        //             withAWS(credentials:'AWS_Cred_Private', region: 'us-east-1') {  
        //                 tag = sh (script: "aws ecr list-images --repository-name hometask --filter --region us-east-1 tagStatus=TAGGED | grep imageTag | awk ' { print \$2 } ' |sort -V -r | head -1 | sed 's/\"//g'", returnStdout: true).trim()
        //                 withCredentials([[$class: 'UsernamePasswordMultiBinding' , credentialsId: 'hometask_github_cred', usernameVariable: 'username', passwordVariable: 'password']]){	
        //                     sh """
        //                         git clean -f -x
        //                         git checkout origin main
        //                         git merge dev
        //                         git push https://$username:$password@github.com/Brylov/HomeTask.git                         
        //                     """
        //                 } 
        //             }                   
        //         }
        //     }
        // }
    }
    post { 
        always { 
            cleanWs()
        }
    }
}